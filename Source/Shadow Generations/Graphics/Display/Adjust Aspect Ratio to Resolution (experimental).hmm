Code "Adjust Aspect Ratio to Resolution (experimental)" in "Graphics/Display" by "M&M & Hyper" does 
/*
Dynamically adjusts the aspect ratio to match the game resolution (recommended for non-16:9 resolutions).

Notes;
- This code will still function at 16:9 resolutions, but will only fix minor aspect ratio issues (such as improper cutscene aspect ratio).
- The UI will be stretched automatically for square or portrait resolutions.

Known issues;
- The UI still renders at 16:9 and details that are supposed to be off screen will be visible at wider aspect ratios.
- Cutscenes will stretch to your aspect ratio.
- The expected aspect ratio will only apply to a newly set resolution when you change the screen mode to another and back.
- Vignette (the circular shadowing effect on the screen) is pretty egregious at aspect ratios wider than 21:9, it is highly recommended to use the Disable Vignette code to remove it.
*/
//
    #lib "Win32"

    using System.Diagnostics;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Sequential)]
    struct RECT
    {
        public int Left;
        public int Top;
        public int Right;
        public int Bottom;
    }

    [DllImport("user32.dll")]
    static extern bool GetClientRect(IntPtr hWnd, ref RECT lpRect);

    static bool _isInitialised = false;

    static float _aspectRatio = 1920.0f / 1080.0f;

    static long _mainAspectRatioAddr = 0;
    static long _dvSceneAspectRatioAddr = 0;
//
{
    if (!_isInitialised)
    {
        // v1.1.0.0: 0x14012EE57
        // v1.1.0.1: 0x14012F107
        long mainAspectRatioInstrAddr = ScanSignature
        (
            "\xF3\x0F\x59\x05\xCC\xCC\xCC\xCC\x89\x4C\x24\x3C",
            "xxxx????xxxx"
        );

        // v1.1.0.0/v1.1.0.1: 0x1411669B4
        _mainAspectRatioAddr = mainAspectRatioInstrAddr + Read<uint>(mainAspectRatioInstrAddr + 4) + 8;

        // v1.1.0.0: 0x140A6867C
        // v1.1.0.1: 0x140A6894C
        _dvSceneAspectRatioAddr = ScanSignature
        (
            "\xC7\x81\x04\x02\x00\x00\x39\x8E\xE3\x3F",
            "xxxxxxxxxx"
        );

        _isInitialised = true;
    }

    if (_mainAspectRatioAddr == 0)
        return;

    var clientRect = new RECT();

    if (!GetClientRect(Win32.GetGameWindowHandle(), ref clientRect))
        return;

    float width  = (float)(clientRect.Right - clientRect.Left);
    float height = (float)(clientRect.Bottom - clientRect.Top);

    _aspectRatio = width / height;

    WriteProtected<float>(_mainAspectRatioAddr, _aspectRatio);

    if (_dvSceneAspectRatioAddr != 0)
        WriteProtected<float>(_dvSceneAspectRatioAddr + 6, _aspectRatio);
}