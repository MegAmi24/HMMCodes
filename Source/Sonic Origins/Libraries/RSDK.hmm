Library "RSDK" by "Hyper, ĐeäTh & MegAmi"
{
    #include "Helpers" noemit

    #lib "Helpers"
    #lib "Memory"

    private static bool _isInitialised = false;

    private static long _pRSDKv3Data = 0;
    private static long _pRSDKv4Data = 0;
    private static long _pRSDKGlobals = 0;
    private static nint _pRSDKDataPath = 0;

    [LibraryInitializer]
    public void Init()
    {
        if (_isInitialised)
            return;

        long sig = ScanSignature
        (
            "\x48\x63\xFB\x48\x8B\xCE\x48\x8B\xD7\x48\xC1\xE2\x05\x49\x03\xD6\xE8\x00\x00\x00\x00\x3C\x01\x74\x2D\x0F\xB6\x05\x00\x00\x00\x00\xFF\xC3\x3B\xD8\x7C\xDA\xB8\x00\x00\x00\x00\x48\x8B\x5C\x24\x00\x48\x8B\x6C\x24\x00\x48\x8B\x74\x24\x00\x48\x8B\x7C\x24\x00\x48\x83\xC4\x20\x41\x5E\xC3\x48\x8D\x05\x00\x00\x00\x00\x89\x2C\xB8\x8B\xC3\xEB\xD7",
            "xxxxxxxxxxxxxxxxx????xxxxxxx????xxxxxxx????xxxx?xxxx?xxxx?xxxx?xxxxxxxxxx????xxxxxxx"
        )
        + 0x46;

        _pRSDKv3Data = (long)sig + *((int*)IntPtr.Add(new IntPtr(sig), 3)) + 7;

        sig = ScanSignature
        (
            "\x4C\x8D\x35\x00\x00\x00\x00\x4C\x89\x7C\x24\x00\x4C\x8D\x3D\x00\x00\x00\x00\x66\x66\x0F\x1F\x84\x00\x00\x00\x00\x00\x48\x63\xD3\x48\x8B\xCD\x48\xC1\xE2\x05\x49\x03\xD7\xE8\x00\x00\x00\x00\x3C\x01\x75\x0B\xBB\x00\x00\x00\x00\x41\x89\x34\xBE\x8B\xFB\x0F\xB6\x05\x00\x00\x00\x00\xFF\xC3\x48\xFF\xC7\x3B\xD8\x7C\xCF\x4C\x8B\x7C\x24\x00\x4C\x8B\x74\x24\x00\x48\x8B\x7C\x24\x00\x48\x83\xC4\x20\x5E\x5D\x5B\xC3",
            "xxx????xxxx?xxx????xxxxxx????xxxxxxxxxxxxxx????xxxxx????xxxxxxxxx????xxxxxxxxxxxxx?xxxx?xxxx?xxxxxxxx"
        );

        _pRSDKv4Data = (long)sig + *((int*)IntPtr.Add(new IntPtr(sig), 3)) + 7;

        sig = ScanSignature
        (
            "\x48\x8B\x05\x00\x00\x00\x00\x8B\x80\x00\x00\x00\x00\x85\xC0\x78\x2D\x83\xF8\x01\x7E\x1F\x83\xF8\x02\x74\x11\x83\xC0\xFC\x83\xF8\x02\x77\x1B\x48\x8D\x0D\x00\x00\x00\x00\xEB\x19\x48\x8D\x0D\x00\x00\x00\x00\xEB\x10\x48\x8D\x0D\x00\x00\x00\x00\xEB\x07\x48\x8D\x0D\x00\x00\x00\x00\x48\x8B\x05\x00\x00\x00\x00\xB2\x02\x4C\x8B\x80\x00\x00\x00\x00\x41\xFF\xD0\x48\x8B\x0D\x00\x00\x00\x00\x66\x89\x41\x04",
            "xxx????xx????xxxxxxxxxxxxxxxxxxxxxxxxx????xxxxx????xxxxx????xxxxx????xxx????xxxxx????xxxxxx????xxxx"
        );

        _pRSDKGlobals = (long)sig + *((int*)IntPtr.Add(new IntPtr(sig), 3)) + 7;

        sig = ScanSignature
        (
            "\x48\x8D\x0D\x00\x00\x00\x00\xC6\x05\x00\x00\x00\x00\x01\xC6\x05\x00\x00\x00\x00\x00",
            "xxx????xx????xxx????x"
        );

        _pRSDKDataPath = (nint)(Memory.ReadEffectiveAddress((long)sig));

        _isInitialised = true;
    }

    public long GetRSDKv3DataPtr()
    {
        return _pRSDKv3Data;
    }

    public long GetRSDKv4DataPtr()
    {
        return _pRSDKv4Data;
    }

    public long GetRSDKGlobalsPtr()
    {
        return *(long*)_pRSDKGlobals;
    }

    public byte GetEngineVersion()
    {
        return *(byte*)(_pRSDKDataPath - 0x08);
    }

    public Game GetCurrentGame()
    {
        if (GetEngineVersion() == 3) // RSDKv3
            return Game.SonicCD;
        else if (GetEngineVersion() == 4) // RSDKv4
        {
            // Check datafile name to see if this is Sonic 1 or 2
            if (Helpers.PtrToStringUTF8(_pRSDKDataPath) == "retro/Sonic1u.rsdk")
                return Game.Sonic1;
            else
                return Game.Sonic2;
        }
        else if (GetEngineVersion() == 5) // RSDKv5
            return Game.Sonic3k;

        return Game.Unknown;
    }

    public PlayMode GetPlayMode()
    {
        if (GetCurrentGame() == Game.Sonic1)
            // Version 1.0.0 and 1.0.4: RSDKv4DataPtr + 0x1A4
            // Version 2.0.0 to 2.0.2: RSDKv4DataPtr + 0x1AC
            return (PlayMode)(*(byte*)(GetRSDKv4DataPtr() + 0x1AC));
        else if (GetCurrentGame() == Game.SonicCD)
            return (PlayMode)(*(byte*)(GetRSDKv3DataPtr() + 0x1DC));
        else if (GetCurrentGame() == Game.Sonic2)
            return (PlayMode)(*(byte*)(GetRSDKv4DataPtr() + 0x23C));
        else if (GetCurrentGame() == Game.Sonic3k && GetRSDKGlobalsPtr() != 0)
            // Version 1.0.0: RSDKGlobalsPtr + 0x447D08
            // Version 1.0.4: RSDKGlobalsPtr + 0x4C3508 (Thanks to RDC)
            // Version 2.0.0: RSDKGlobalsPtr + 0x4C3510
            return (PlayMode)(*(byte*)(GetRSDKGlobalsPtr() + 0x4C3510));

        return PlayMode.Unknown;
    }

    public enum Game
    {
        Unknown = -1,
        Sonic1,
        SonicCD,
        Sonic2,
        Sonic3k
    }

    public enum PlayMode : sbyte
    {
        Unknown = -1,
        Classic,
        Anniversary,
        BossRush,
        Mirror,
        Mission,
        Story,
        BlueSpheres,
        NewBlueSpheres
    }

    public enum S3KMedalMods : int
    {
        DebugMode = (1 << 0),
        AndKnuckles = (1 << 1),
        SuperPeelOut = (1 << 2),
        InstaShield = (1 << 3),
        NoDropDash = (1 << 4),
        NoTimeOver = (1 << 5),
        NoLives = (1 << 6)
    }

    public enum S3KSecrets : int
    {
        RickyMode = (1 << 0),
        SuperDash = (1 << 1),
        BarrelHotline = (1 << 2),
        NormalPhysics2P = (1 << 3),
        RegionSwap = (1 << 4),
        CameraTracking = (1 << 5),
        PenPenMode = (1 << 6),
        RandomItems = (1 << 7),
        BlueShield = (1 << 8),
        Unknown = (1 << 9),
        BananaMode = (1 << 10),
        NoItems = (1 << 11),
        HiddenCredits = (1 << 12)
    }
}
