Library "GameStartup" by "MegAmi"
{
    #include "Helpers" noemit

    #lib "RSDK"

    using System.Collections.Generic;

    private static bool _isInitialised = false;

    private static List<StartupVariable> _s1Variables = new();
    private static List<StartupVariable> _sCDVariables = new();
    private static List<StartupVariable> _s2Variables = new();

    private class StartupVariable
    {
        public string Name { get; set; }
        public int Value { get; set; }
        public bool BitOr { get; set; }

        public StartupVariable(string in_name, int in_value, bool in_bitOr)
        {
            Name    = in_name;
            Value   = in_value;
            BitOr   = in_bitOr;
        }
    }

    public void SetStartupVariable(RSDK.Game game, string name, int value, bool bitOr)
    {
        if (name.Equals("game.hasPlusDLC", StringComparison.OrdinalIgnoreCase))
            return;

        if (game == RSDK.Game.Sonic1)
            _s1Variables.Add(new StartupVariable(name, value, bitOr));
        else if (game == RSDK.Game.SonicCD)
            _sCDVariables.Add(new StartupVariable(name, value, bitOr));
        else if (game == RSDK.Game.Sonic2)
            _s2Variables.Add(new StartupVariable(name, value, bitOr));
    }

    public void SetStartupVariable(RSDK.Game game, string name, int value)
    {
        SetStartupVariable(game, name, value, false);
    }

    public void SetStartupVariable(string name, int value, bool bitOr)
    {
        SetStartupVariable(RSDK.Game.Sonic1, name, value, bitOr);
        SetStartupVariable(RSDK.Game.SonicCD, name, value, bitOr);
        SetStartupVariable(RSDK.Game.Sonic2, name, value, bitOr);
    }

    public void SetStartupVariable(string name, int value)
    {
        SetStartupVariable(name, value, false);
    }

    public void RemoveStartupVariable(RSDK.Game game, string name)
    {
        if (game == RSDK.Game.Sonic1)
        {
            foreach(var variable in _s1Variables)
            {
                if (variable.Name.Equals(name, StringComparison.OrdinalIgnoreCase))
                    _s1Variables.Remove(variable);
            }
        }
        else if (game == RSDK.Game.SonicCD)
        {
            foreach(var variable in _sCDVariables)
            {
                if (variable.Name.Equals(name, StringComparison.OrdinalIgnoreCase))
                    _sCDVariables.Remove(variable);
            }
        }
        else if (game == RSDK.Game.Sonic2)
        {
            foreach(var variable in _s2Variables)
            {
                if (variable.Name.Equals(name, StringComparison.OrdinalIgnoreCase))
                    _s2Variables.Remove(variable);
            }
        }
    }

    UNMANAGED_FUNCTION(void, SetVariables)
    {
        if (RSDK.GetCurrentGame() == RSDK.Game.Sonic1)
        {
            foreach(var variable in _s1Variables)
            {
                if (!variable.BitOr)
                    RSDK.SetLegacyGlobalByName(variable.Name, variable.Value);
                else
                    RSDK.SetLegacyGlobalByName(variable.Name, RSDK.GetLegacyGlobalByName(variable.Name) | variable.Value);
            }
        }
        else if (RSDK.GetCurrentGame() == RSDK.Game.SonicCD)
        {
            foreach(var variable in _sCDVariables)
            {
                if (!variable.BitOr)
                    RSDK.SetLegacyGlobalByName(variable.Name, variable.Value);
                else
                    RSDK.SetLegacyGlobalByName(variable.Name, RSDK.GetLegacyGlobalByName(variable.Name) | variable.Value);
            }
        }
        else if (RSDK.GetCurrentGame() == RSDK.Game.Sonic2)
        {
            foreach(var variable in _s2Variables)
            {
                if (!variable.BitOr)
                    RSDK.SetLegacyGlobalByName(variable.Name, variable.Value);
                else
                    RSDK.SetLegacyGlobalByName(variable.Name, RSDK.GetLegacyGlobalByName(variable.Name) | variable.Value);
            }
        }

        _isInitialised = true;
        return;
    }

    [LibraryInitializer]
    public void Init()
    {
        /* v2.0.2: 0x140100410 */
        long sig = ScanSignature
        (
            "\x48\x63\xC1\x48\x8D\x0D\x00\x00\x00\x00\x48\x8B\x8C\xC1\x00\x00\x00\x00\x83\xFA\x03\x0F\x84\x00\x00\x00\x00\x83\xFA\x04\x0F\x84\x00\x00\x00\x00\xB8\xFF\xFF\xFF\xFF\xC3",
            "xxxxxx????xxxx????xxxxx????xxxxx????xxxxxx"
        );

        fixed (bool* p_isInitialised = &_isInitialised)
        {
            // Thanks to Hyper for fixing a crash here
            string callFunction = @$"
                push rdi
                mov  rdi, {(long)p_isInitialised}
                cmp  byte ptr [rdi], 1
                je   exit
                mov  rdi, {GET_UNMANAGED_FUNCTION_PTR(SetVariables)}
                call rdi

            exit:
                pop  rdi
            ";

            WriteAsmHook(callFunction, (nint)(Memory.ReadEffectiveAddress(sig + 20)), HookBehavior.After);
            WriteAsmHook(callFunction, (nint)(Memory.ReadEffectiveAddress(sig + 29)), HookBehavior.After);
        }
    }

    [LibraryUpdate]
    public void Update()
    {
        if (RSDK.GetEngineVersion() == 0) // If no game is running
            _isInitialised = false;
    }
}
