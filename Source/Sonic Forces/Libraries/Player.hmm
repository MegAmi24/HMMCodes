Library "Player" by "Hyper"
{
    #include "Helpers" noemit

    #lib "GameManager"
    #lib "GameObject"

    #lib "Sonic"
    #lib "Buddy"

    #import "Blackboards"
    #import "GOComponents"
    #import "Input"
    #import "PlayerTargets"
    #import "Plugins"
    #import "Services"

    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Explicit, Size = 0x208)]
    public struct Data
    {
        [FieldOffset(0)] public GameObject.Data Base;
        
        public PlayerContext* GetContext()
        {
            fixed (Data* pThis = &this)
            {
                var pGOCPlayerHsm = GameObject.GetGOC<GOCPlayerHsm>(&pThis->Base);

                if (pGOCPlayerHsm == null)
                    return null;
                
                return pGOCPlayerHsm->pPlayerContext;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xA8)]
    public struct PlayerContext
    {
        [FieldOffset(0x18)] public Data* pPlayer;
        
        [FieldOffset(0x20)] public BlackboardStatus* pBlackboardStatus;

        [FieldOffset(0x38)] public GOCPlayerHsm* pGOCPlayerHsm;
    }
    
    public Data* GetSonicData()
    {
        return (Data*)GameManager.GetGameObject("Sonic");
    }

    public Data* GetClassicSonicData()
    {
        return (Data*)GameManager.GetGameObject("SonicClassic");
    }

    public Data* GetBuddyData()
    {
        return (Data*)GameManager.GetGameObject("Buddy");
    }

    public Data* GetPlayerData()
    {
        var pSonic = GetSonicData();
        var pBuddy = GetBuddyData();

        if (pSonic != null && pBuddy != null)
        {
            // bodge
            if (Player.State.GetCurrentStateID<Sonic.StateID>(pSonic).ToString().Contains("Follow"))
                return pBuddy;

            return pSonic;
        }

        if (pSonic != null)
            return pSonic;

        if (pBuddy != null)
            return pBuddy;

        var pClassicSonic = GetClassicSonicData();

        if (pClassicSonic != null)
            return pClassicSonic;

        return null;
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static class Input
    {
        public static InputComponent* GetInputComponent()
        {
            var pPlayer = GetPlayerData();

            if (pPlayer == null)
                return null;

            var pGOCInput = GameObject.GetGOC<GOCInput>(&pPlayer->Base);

            if (pGOCInput == null)
                return null;

            return pGOCInput->pInputComponent;
        }

        public static EButtonState GetButtonState(EButtonType in_buttonType)
        {
            var pInputComponent = GetInputComponent();

            if (pInputComponent == null)
                return EButtonState.Idle;

            foreach (var binding in pInputComponent->Buttons)
            {
                if (binding.ButtonType == in_buttonType)
                    return binding.ButtonState;
            }

            return EButtonState.Idle;
        }

        public static float GetAnalog(EAxisType in_axisType)
        {
            var pInputComponent = GetInputComponent();

            if (pInputComponent == null)
                return 0.0f;

            foreach (var binding in pInputComponent->Axes)
            {
                if (binding.AxisType == in_axisType)
                    return binding.Value;
            }

            return 0.0f;
        }

        public static bool IsAnalogNeutral()
        {
            return GetAnalog(EAxisType.Horizontal) == 0.0f && GetAnalog(EAxisType.Vertical) == 0.0f;
        }
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    public static class State
    {
        public static T GetCurrentStateID<T>(Data* in_pPlayer)
        {
            if (in_pPlayer == null)
                return default;
            
            var pContext = in_pPlayer->GetContext();

            if (pContext == null)
                return default;

            var pGOCPlayerHsm = pContext->pGOCPlayerHsm;

            if (pGOCPlayerHsm == null)
                return default;

            return (T)(object)pGOCPlayerHsm->CurrentStateID;
        }

        public static void SetState<T>(Data* in_pPlayer, T in_destination)
        {
            if (in_pPlayer == null)
                return;
            
            var pContext = in_pPlayer->GetContext();

            if (pContext == null)
                return;

            var pGOCPlayerHsm = pContext->pGOCPlayerHsm;

            if (pGOCPlayerHsm == null)
                return;

            pGOCPlayerHsm->DestinationStateID = (int)(object)in_destination;
            pGOCPlayerHsm->StateFlags |= 0x10;
            pGOCPlayerHsm->StateFlags &= 0xDF;
        }

        public static StatePluginBase* GetStatePlugin(Data* in_pPlayer, string in_pluginName)
        {
            if (in_pPlayer == null)
                return null;
            
            var pContext = in_pPlayer->GetContext();

            if (pContext == null)
                return null;
            
            var pStatePluginManager = pContext->pGOCPlayerHsm->pStatePluginManager;

            if (pStatePluginManager == null)
                return null;

            return pStatePluginManager->GetStatePlugin(in_pluginName);
        }

        public static T* GetStatePlugin<T>(Data* in_pPlayer) where T : unmanaged
        {
            var name = Helpers.GetInternalName(typeof(T));
            
            return (T*)GetStatePlugin(in_pPlayer, string.IsNullOrEmpty(name) ? typeof(T).Name : name);
        }
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static class Status
    {
        public static GameObject.Data* GetLockOnTarget()
        {
            var pPlayerTargetService = GameManager.GetService<PlayerTargetService>();

            if (pPlayerTargetService == null)
                return null;
                
            var pHomingTarget = pPlayerTargetService->GetTargetComponent<HomingTarget>();

            if (pHomingTarget == null)
                return null;
                
            // TODO: check if homing reticle is visible.

            return pHomingTarget->GetPriorityTarget();
        }
    }
}