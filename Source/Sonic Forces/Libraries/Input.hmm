Library "Input" by "Hyper"
{
    #lib "Helpers"
    #lib "Memory"

    #import "Collections"

    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Explicit, Size = 0xD8, Pack = 0x20)]
    public struct InputComponent
    {
        [FieldOffset(0x20)] public void* pInputManager;

        [FieldOffset(0x28)] public InternalPlayerInput* pInternalPlayerInput;

        [FieldOffset(0x30)] public InputMapSettings* pInputMapSettings;

        [FieldOffset(0x38)] public Helpers.UnmanagedString Name;

        [FieldOffset(0x48)] public void** pInputListener;

        [FieldOffset(0x78)] public ObjectMoveArray<ButtonBinding> Buttons;

        [FieldOffset(0x98)] public ObjectMoveArray<AxisBinding> Axes;

        public override string ToString() => Name.ToString();
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x48, Pack = 0x20)]
    public struct InternalPlayerInput
    {
        [FieldOffset(0x28)] public ObjectMoveArray<Memory.Pointer<InputComponent>> InputComponents;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x68, Pack = 0x20)]
    public struct InputMapSettings
    {
        [FieldOffset(0x18)] public ObjectMoveArray<Memory.Pointer<ActionMapping>> ActionMappings;

        [FieldOffset(0x38)] public ObjectMoveArray<Memory.Pointer<AxisMapping>> AxisMappings;

        public void SetAxisDeadzone(float in_deadZone)
        {
            foreach (var axisMapping in AxisMappings)
            {
                var bindings = axisMapping.pData->Bindings;

                for (int i = 0; i < bindings.Length; i++)
                    bindings[i].Min = in_deadZone;
            }
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct ButtonBinding
    {
        public byte UnknownField1;
        public EButtonType ButtonType;
        public byte UnknownField2;
        public byte UnknownField3;
        public EButtonState ButtonState;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct AxisBinding
    {
        public byte UnknownField1;
        public EAxisType AxisType;
        public byte UnknownField2;
        public byte UnknownField3;
        public float Value;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x80, Pack = 0x20)]
    public struct ActionMapping
    {
        [FieldOffset(0x18)] public short Flags;

        [FieldOffset(0x20)] public Helpers.UnmanagedString Name;

        [FieldOffset(0x30)] public ObjectMoveArray<int> Bindings;

        public override string ToString() => Name.ToString();
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x80, Pack = 0x20)]
    public struct AxisMapping
    {
        [FieldOffset(0x18)] public short Flags;

        [FieldOffset(0x20)] public Helpers.UnmanagedString Name;

        [FieldOffset(0x30)] public ObjectMoveArray<AxisData> Bindings;

        [StructLayout(LayoutKind.Sequential)]
        public struct AxisData
        {
            public int ID;
            public float Max;
            public float Min;
        }

        public override string ToString() => Name.ToString();
    }

    public enum EButtonType : byte
    {
        A,
        A2,
        RT,
        Y,
        B,
        B2,
        X,
        A3,
        LT,
        LB,
        RB,
        X2,
        Up = 21,
        Down,
        Left,
        Right
    }

    public enum EButtonState : byte
    {
        Idle,
        Hold,
        Release = 4,
        Press = 19
    }

    public enum EAxisType : byte
    {
        Vertical,
        Horizontal
    }
}