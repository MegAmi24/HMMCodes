Code "Super Stomp" in "Gameplay" by "Hyper & Yosho" does 
/*
Sends a powerful shockwave when landing a stomp from a great height.

Idea by Yosho.
*/
//
    #lib "MathHelpers"
    #lib "Memory"
    #lib "Player"

    #load "System.Numerics.dll"

    using System.Numerics;

    static bool IsInitialised = false;
    static bool IsStompBeginPositionPreserved = false;

    static Vector3 StompBeginPosition;

    static float HeightFallen = 0.0f;
    static float HeightThreshold = 15.0f;
    static float Radius = 11.0f;
//
{
    if (!IsInitialised)
    {
        fixed (float* pHeightFallen = &HeightFallen)
        fixed (float* pHeightThreshold = &HeightThreshold)
        {
            /* 0x1408ACA68 */
            long shockwaveCondAddr = ScanSignature
            (
                "\xE8\xCC\xCC\xCC\xCC\x83\xBE\xB0\x00\x00\x00\x02\x48\x8B\xE8",
                "x????xxxxxxxxxx"
            );

            // Set stomp shockwave condition.
            WriteAsmHook
            (
                $@"
                    mov    rax, {Memory.ReadCall(shockwaveCondAddr)}
                    call   rax
                    mov    rbp, {(long)pHeightFallen}
                    movss  xmm8, dword ptr [rbp]
                    mov    rbp, {(long)pHeightThreshold}
                    movss  xmm9, dword ptr [rbp]
                    comiss xmm8, xmm9
                    mov    ebp, dword ptr [rsi + 0xB0] ; preserve stomp bounce count
                    jna    exit
                    mov    dword ptr [rsi + 0xB0], 2   ; force stomp bounce count to meet condition requirements
                exit:
                    cmp    dword ptr [rsi + 0xB0], 2
                    mov    dword ptr [rsi + 0xB0], ebp ; restore stomp bounce count
                    mov    rbp, {(long)pHeightFallen}
                    mov    dword ptr [rbp], 0
                    mov    rbp, rax
                ",

                shockwaveCondAddr,

                HookBehavior.Replace
            );
        }

        fixed (float* pRadius = &Radius)
        {
            /* 0x1408ACA9B */
            long radiusAddr = ScanSignature
            (
                "\xF3\x0F\x10\x55\x1C\xB2\x08",
                "xxxxxxx"
            );

            WriteAsmHook
            (
                $@"
                    mov   rcx, {(long)pRadius}
                    movss xmm2, dword ptr [rcx]
                    mov   dl, 8
                    mov   rcx, rax
                    mov   rax, {Memory.ReadCall(radiusAddr + 0x0A)}
                    call  rax
                ",

                radiusAddr,

                HookBehavior.Replace
            );
        }

        IsInitialised = true;
    }

    var kinematics = Player.Kinematics.Get();

    if (kinematics == null)
        return;

    if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateStompingDown)
    {
        if (!IsStompBeginPositionPreserved)
        {
            StompBeginPosition = kinematics->Position;

            IsStompBeginPositionPreserved = true;
        }
        
        HeightFallen = StompBeginPosition.Y - kinematics->Position.Y;

        // 11.0f is the default value for boundStompingCollisionScale.
        Radius = MathHelpers.Clamp(HeightFallen - HeightThreshold, 11.0f, 33.0f);
    }
    else
    {
        IsStompBeginPositionPreserved = false;

        HeightFallen = 0.0f;
    }
}


