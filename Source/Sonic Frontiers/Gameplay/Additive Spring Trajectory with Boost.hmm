Code "Additive Spring Trajectory with Boost" in "! Incompatible - awaiting fixes for v1.40" by "WasifBoomz" does "Keeps your velocity upon hitting a vertical spring while boosting." 
//
    #include "BlackboardStatus" noemit

    #lib "Bitwise"
    #lib "BlackboardStatus"
    #lib "Player"
	
    #load "System.Numerics.dll"
	
    using System.Numerics;
    using System.Collections.Generic;
	
    static int framesSinceHit = 0;
    static bool boosting = false;
    static bool isInitialised = false;
    static Vector3 prevVelocity;
//
{
    if (!isInitialised)
    {
        long aSpringJump = ScanSignature
        (
            "SPRING_JUMP",
            "xxxxxxxxxxx"
        );

        long ChangeAnimLocation = ScanSignature
        (
            "\x40\x53\x48\x83\xEC\x20\xF6\x81\x78\x01\x00\x00\x10\x48\x8B\xDA",
            "xxxxxxxxxxxxxxxx"
        );

        fixed (bool* pBoosting = &boosting)
        fixed (int* pFramesSinceHit = &framesSinceHit)
        {
            WriteAsmHook
            (
                $@"
                    mov  rax, {(long)aSpringJump}
                    cmp  rdx, rax
                    jnz  original
                    mov  rcx, {(long)pBoosting}
                    cmp  byte ptr [rcx], 0
                    jz   original
                    mov  rax, {(long)pFramesSinceHit}
                    mov  byte ptr [rax], 1
                original:
                    mov  r8b, 0FEh
                    mov  rcx, rbx
                    mov  rax, {(long)ChangeAnimLocation}
                    call rax
                    mov  edx, [rbp+0DCh]
                ",
                    
                /* 0x1408C1B02 */
                ScanSignature(
                    "\x41\xB0\xFE\x48\x8B\xCB\xE8\xCC\xCC\xCC\xCC\x8B\x95\xDC\x00\x00\x00",
                    "xxxxxxx????xxxxxx"
                ),
                    
                HookBehavior.Replace
            );
        }

        isInitialised = true;
    }

    var kinematics = Player.Kinematics.Get();

    if (kinematics == null)
        return;

    boosting = IS_STATE_FLAG(IsBoost);

    switch (framesSinceHit)
    {
        case 0:
            prevVelocity = kinematics->Velocity;
            break;

        case 1:
            Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateBumpJump);
            framesSinceHit++;
            break;

        case 2:
        {
            if (Player.Kinematics.GetHorizontalMagnitude() < Math.Abs(kinematics->Velocity.Y))
                kinematics->Velocity += new Vector3(prevVelocity.X, 0, prevVelocity.Z);

            framesSinceHit = 0;

            break;
        }

        default:
            framesSinceHit = 1;
            break;
    }
}


